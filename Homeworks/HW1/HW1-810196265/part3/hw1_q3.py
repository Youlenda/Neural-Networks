# -*- coding: utf-8 -*-
"""hw1-q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bMFZPEI7lU5uZnmAt6qf73HR71ga8dpA
"""

import numpy as np

x1 = np.array([1,  1, -1, -1])
x2 = np.array([1, -1,  1, -1])

target = np.array([1, -1, -1, 1])

v = np.array([[0.5],[0.5]])
b = np.array([[0.3],[0.15],[0.5]])
w = np.array([[0.05,0.1],[0.2,0.2]])

alfa = 0.69

def sign(x):
  if x >= 0:
    yt =  1
  else:
    yt = -1
  return(yt)

flag = True
epoch =0
while(flag):
  flag = False
  for i in range (0,4):
    z_in1 = x1[i] * w[0,0] + x2[i] * w[1,0] + b[0,0]
    z_in2 = x1[i] * w[0,1] + x2[i] * w[1,1] + b[1,0]
    z1 = sign(z_in1)
    z2 = sign(z_in2)
    y_in = v[0,0] * z1 + v[1,0] * z2 + b[2,0]
    y = sign(y_in)
    if (-target[i]+y) == 0:
      error=0
    else:
      if target[i] ==  -1:
          if z_in1>0:
              b[0,0] = b[0,0] + alfa*(-1-z_in1)
              w[0,0] = w[0,0] + alfa*(-1-z_in1)*x1[i]
              w[1,0] = w[1,0] + alfa*(-1-z_in1)*x2[i]
          if z_in2>0 :
              b[1,0] = b[1,0] + alfa*(-1-z_in2)
              w[0,1] = w[0,1] + alfa*(-1-z_in2)*x1[i]
              w[1,1] = w[1,1] + alfa*(-1-z_in2)*x2[i]
          
          #flag = True
      if target[i] == 1:
          if abs(z_in1)<abs(z_in2):
              b[0,0] = b[0,0] + alfa*(1-z_in1)
              w[0,0] = w[0,0] + alfa*(1-z_in1)*x1[i]
              w[1,0] = w[1,0] + alfa*(1-z_in1)*x2[i]
          else:
              b[1,0] = b[1,0] + alfa*(1-z_in2)
              w[0,1] = w[0,1] + alfa*(1-z_in2)*x1[i]
              w[1,1] = w[1,1] + alfa*(1-z_in2)*x2[i]       
          flag = True
  epoch = epoch +1
      

print("Weights = ")
print(w)
print("Bias =" )
print(b[0:2])

x1_line = np.arange(-2, 3)
x2_line1 = (-b[0,0] - w[0,0] * x1_line)/w[1,0]
x2_line2 = (-b[1,0] - w[0,1] * x1_line)/w[1,1]

import matplotlib.pyplot as plt
plt.scatter(x1, x2, color='red', marker='o')
plt.plot(x1_line,x2_line1,'b')
plt.plot(x1_line,x2_line2,'g')
plt.xlabel('x1')
plt.ylabel('x2')
#plt.xlim(-1,0.5)
plt.grid()
plt.show()