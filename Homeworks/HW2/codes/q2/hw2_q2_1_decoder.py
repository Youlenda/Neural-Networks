# -*- coding: utf-8 -*-
"""hw2-q2.1.decoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1srdV4BMLWUMgjyI4P8cAD3-71wP8X84e
"""

from keras.datasets import mnist
from keras.utils import np_utils
import numpy as np

(x_train, _),(x_test, _) = mnist.load_data()
x_train = x_train.reshape((60000, 784))
x_test  = x_test.reshape ((10000, 784))

x_train = x_train.astype('float32')
x_test  = x_test.astype ('float32')

x_train /= 255
x_test  /= 255

from keras.layers import Input, Dense
from keras.models import Model

input_img = Input(shape=(784,))
encoded = Dense(512, activation='relu')(input_img)
encoded = Dense(256, activation='relu')(encoded)
encoded = Dense(100, activation='relu')(encoded)

decoded = Dense(256, activation='relu')(encoded)
decoded = Dense(512, activation='relu')(decoded)
decoded = Dense(784, activation='softmax')(decoded)

autoencoder = Model(input_img, decoded)

from keras import optimizers

sgd = optimizers.SGD(lr=0.01)
autoencoder.compile(optimizer=sgd, loss='binary_crossentropy', metrics=['accuracy'])

autoencoder.summary()

import timeit

start = timeit.default_timer()

trained_model = autoencoder.fit(x_train, x_train, batch_size = 32, epochs = 30, validation_split = 0.2)
history = trained_model.history

stop = timeit.default_timer()
print('Time: ', stop - start)

score = autoencoder.evaluate(x_test, x_test, verbose=0)
print('Test Loss is', score[0], '.')
print('Test Accuracy is', score[1],'.')

encoder = Model(input_img, encoded)
json_encoder = encoder.to_json()
with open("encoder.json", "w") as json_file:
    json_file.write(json_encoder)
#encoder.save_weights("encoder_weights.h5")
encoder.save_weights('encoder_weights')