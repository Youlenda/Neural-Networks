# -*- coding: utf-8 -*-
"""hw2-q2-mlp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YqT7ztrcPPBXZKaokCD-Tz3xKMW0nQ-u
"""

from keras.datasets import mnist
from keras.utils import np_utils
import numpy as np

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((60000, 784))
x_test  = x_test.reshape ((10000, 784))

x_train = x_train.astype('float32')
x_test  = x_test.astype ('float32')

x_train /= 255
x_test  /= 255

y_train = np_utils.to_categorical(y_train)
y_test  = np_utils.to_categorical(y_test)

from keras.models import load_model
from keras.models import model_from_json

json_file = open('encoder.json', 'r')
loaded_model = json_file.read()
json_file.close()
encoder = model_from_json(loaded_model)
encoder.load_weights("encoder_weights.dms")
print("Model loaded")

from keras.layers import Input, Dense
from keras.models import Model

mlp = Dense(512, activation='relu')(encoder.output)
mlp = Dense(512, activation='relu')(mlp)
mlp = Dense(10, activation='softmax')(mlp)

autoencoder = Model(encoder.inputs, mlp)

from keras import optimizers

sgd = optimizers.SGD(lr=0.01)
autoencoder.compile(optimizer=sgd, loss='categorical_crossentropy', metrics=['accuracy'])

autoencoder.summary()

import timeit

start = timeit.default_timer()

trained_model = autoencoder.fit(x_train, y_train, batch_size = 32, epochs = 30, validation_split = 0.2)
history = trained_model.history

stop = timeit.default_timer()
print('Time: ', stop - start)