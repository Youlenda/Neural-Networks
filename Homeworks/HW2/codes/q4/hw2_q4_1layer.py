# -*- coding: utf-8 -*-
"""hw2-q4-1layer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dm1gutEJ1YkD7_f6R5XNSWJxe8cYFh02
"""

import pandas as pd

df = pd.read_csv('house_data.csv')
dataset = df.values

# df
# dataset.shape, dataset

x = dataset[:, 0:13]
y = dataset[:, 13]

# x.shape, y.shape

from sklearn import preprocessing
import numpy as np

min_max_scaler = preprocessing.MinMaxScaler()
x_scale = min_max_scaler.fit_transform(x)

TransformY = preprocessing.MinMaxScaler()
y_scale = TransformY.fit_transform(y.reshape(y.shape[0],1))

#x_scale, y_scale

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x_scale, y_scale, test_size=0.2)

#x_train.shape,x_test.shape,x_val.shape

from keras.models import Sequential
from keras.layers import Dense

model = Sequential([
    Dense(10, activation='relu', input_shape=(13,)),
    Dense(1, kernel_initializer='normal')])

from keras import optimizers

model.compile(loss='mean_squared_error', optimizer='adam')
model.summary()

trained_model = model.fit(x_train, y_train, batch_size=16, epochs=100, validation_split=0.2) #validation_data=(x_val, y_val))

history = trained_model.history

from sklearn.decomposition import PCA
import numpy as np

pca = PCA(n_components=11)
x_train_pca = pca.fit_transform(x_train)
x_test_pca  = pca.transform(x_test)
explained_var = pca.explained_variance_ratio_
np.sum(explained_var[0:11])
pca_out = explained_var[0:11]

from keras.models import Sequential
from keras.layers import Dense

model_pca = Sequential([
    Dense(10, activation='relu', input_shape=(11,)),
    Dense(1, kernel_initializer='normal')])

model_pca.compile(loss='mean_squared_error', optimizer='adam')

trained_model_pca = model_pca.fit(x_train_pca, y_train, batch_size=16, epochs=100, validation_split=0.2)#, validation_data=(x_val, y_val))
history_pca = trained_model_pca.history

max_loss = max(history['val_loss'])
min_loss = min(history['val_loss'])

max_loss_pca = max(history_pca['val_loss'])
min_loss_pca = min(history_pca['val_loss'])

print('Max_loss and Min_loss are', max_loss,',', min_loss,'.')
print('Max_loss_pca and Min_loss_pca are', max_loss_pca,',', min_loss_pca,'.')

import matplotlib.pyplot as plt

Loss_ = history['val_loss']
Loss_pca = history_pca['val_loss']

plt.xlabel('Epochs')
plt.ylabel('val_Loss')
plt.plot(Loss_, 'darkred')
plt.plot(Loss_pca,'darkgreen')
plt.legend(['val_loss without pca','val_loss with pca'])
plt.show()